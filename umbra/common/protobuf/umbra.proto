syntax = "proto3";

package umbra;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";


service Broker {
  rpc Execute(Config) returns (Report);
  rpc Collect(Stats) returns (Status);
}

service Scenario {
  rpc Establish(Workflow) returns (Status);
  rpc Stats(Workflow) returns (Status);
}

service Monitor {
  rpc Measure(Directrix) returns (Status);
}

service Agent {
  rpc Probe(Instruction) returns (Snapshot);
}

service CLI {
  rpc Inform(State) returns (Status);
}


message Config {
  string id = 1;
  string action = 2;
  bytes scenario = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message Report {
  string id = 1;
  bytes info = 2;
  string error = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message Workflow {
  string id = 1;
  string action = 2;
  bytes scenario = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message Status {
  string id = 1;
  string error = 2;
  bytes info = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message Sched {
  uint32 from = 1;
  uint32 until = 2;
  uint32 duration = 3;
  uint32 interval = 4;
  uint32 repeat = 5;
}

message Instruction {
  message Action {
    message Output {
      bool live = 1;
      string address = 2;
    }
    
    string id = 1;
    string tool = 2;
    Output output = 3;
    map<string,string> parameters = 4;
    Sched schedule = 5;
  }

  string id = 1;
  repeated Action actions = 2;
}

message Evaluation {

  message Source {
    string name = 1;
    string call = 2;
  }

  message Metric {
    string name = 1;
    string type = 2;
    string unit = 3;
    oneof value {
      double scalar = 4;
      google.protobuf.Struct series = 5;
    }                   
  }

  message Timestamp {
    google.protobuf.Timestamp start = 1;
    google.protobuf.Timestamp stop = 2;
  }

  string id = 1;
  Source source = 2;
  repeated Metric metrics = 3;
  Timestamp timestamp = 4;
}


message Snapshot {
  string id = 1;
  repeated Evaluation evaluations = 2;
}


message Measurement {
  message Field {
    string name = 1;
    string type = 2;
    string unit = 3;
    string value = 4;
  }

  string name = 1;
  map<string,string> tags = 2;
  map<string,Field> fields = 3;
}


message Source {
  uint32 id = 1;
  string name = 2;
  map<string,string> parameters = 3;  
  Sched schedule = 4;
}

message Directrix { 
  message Flush {
    bool live = 1;
    string address = 2;
    string environment = 3;
  }
  Flush flush = 1;
  repeated Source sources = 2;
  string action = 3;
}

message Stats {
  string environment = 1;
  string source = 2;
  repeated Measurement measurements = 3;
}


message State {
  message Content {
    string info = 1;
    string error = 2;
  }

  string source = 1;
  repeated Content messages = 2;
  google.protobuf.Timestamp ts = 3;
}